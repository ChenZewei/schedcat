# -*-Python-*-
#
# Build system config  for the C++ implementation of selected schedulability
# tests and simulations. See the SCons documentation for details.

Help("""
Fast Test Module --- Schedulability Tests & Co in C++

---
The build depends on GMP and SWIG.
""")

DEBUG_FLAGS = [
    '-Wall',
    '-Wno-deprecated',
#    '-std=gnu++0x',
#    '-Werror',
#    '-pedantic',
#    '-g',          # generate debug info
#    '-pg',         # generate profiler info
    ]

OPT_FLAGS = [
    '-O3',
]

INCLUDE_DIRS = [
    'include/',             # local headers
    '${GMP_PATH}/include',  # GNU MP Bignum Library
    ]

LIB_DIRS = [
    '${GMP_PATH}/lib',      # GNU MP Bignum Library
]

LOCAL_CONFIG_FILE = '.config'
Help("Local variables are read from %s.\n" % LOCAL_CONFIG_FILE)

##############################################################
# Output helpers.

def info(msg):
    print "[II]", msg

def abort(msg):
    print "[EE]", msg
    Exit(1)

##############################################################
# Build configuration.

build_vars = Variables(LOCAL_CONFIG_FILE, ARGUMENTS)

build_vars.AddVariables(
    PathVariable('GMP_PATH', 'Where to find the GMP library.', '/usr')
    )


import os

gmp = Environment(
    variables = build_vars,
    CXX      = 'g++',
    CPPPATH  = INCLUDE_DIRS,
    CXXFLAGS = DEBUG_FLAGS + OPT_FLAGS,
    LINKFLAGS = DEBUG_FLAGS,
    LIBS     = ['gmp', 'gmpxx'],
    LIBPATH  = LIB_DIRS,

    # use custom tools
    ENV = {'PATH' : os.environ['PATH']},
)

Help("---\n\nBuild Variables:")
Help(build_vars.GenerateHelpText(gmp))

cleaning = gmp.GetOption('clean')
help     = gmp.GetOption('help')

if not cleaning and not help:
    conf = Configure(gmp)

    if not conf.CheckCXX():
        abort("C++ compiler missing!")

    if not conf.CheckHeader('gmp.h'):
        abort("GMP header is missing!")

    if not conf.CheckCXXHeader('gmpxx.h'):
        abort("GMP C++ header is missing!")

    gmp = conf.Finish()

import distutils.sysconfig

fw_path, = distutils.sysconfig.get_config_vars('PYTHONFRAMEWORKPREFIX')
if not fw_path:
    fw_path = '/System/Library/Frameworks'

swig = gmp.Clone(
    SWIGFLAGS=['-python', '-c++', '-Wall',  '-includeall', '-classic'],
    SHLIBPREFIX="",
    FRAMEWORKS=['Python'],
    FRAMEWORKPATH=[fw_path],
    SWIGOUTDIR='.',
    SWIGPATH=INCLUDE_DIRS,
)
swig.Append(
    CPPPATH=[distutils.sysconfig.get_python_inc()],
)

EDF_SRC = [
    'src/cpu_time.cpp',
    'src/edf/baker.cpp',
    'src/edf/baruah.cpp',
    'src/edf/gfb.cpp',
    'src/edf/bcl.cpp',
    'src/edf/bcl_iterative.cpp',
    'src/edf/rta.cpp',
    'src/edf/ffdbf.cpp',
    'src/edf/gedf.cpp',
    'src/edf/load.cpp',
    ]

SCHED_SRC = [
    'src/edf/sim.cpp',
    'src/schedule_sim.cpp'
]

gmp.Program('testmain', ['src/testmain.cpp',
                         'src/sharedres.cpp',
                         'src/tasks.cpp'] + EDF_SRC + SCHED_SRC)

swig.SharedLibrary('_sched.so', ['src/tasks.cpp', 'interface/sched.i'] + EDF_SRC)
swig.SharedLibrary('_locking.so', ['src/sharedres.cpp', 'interface/locking.i'])
swig.SharedLibrary('_sim.so', ['src/tasks.cpp', 'interface/sim.i'] + SCHED_SRC)
